head(DF)
str(DF)
DF <- read.csv("metal_bands.csv", sep = ";", dec = ".")
head(DF)
str(DF)
DF=read.csv2("lexdec.csv")
# dataframe lexdec : Lexical decision latencies elicited from 21 subjects for 79 English concrete nouns, with variables linked to subject or word
str(DF)
DF=read.csv2("lexdec.csv", na.strings = c("NA","pas fini"))
str(DF)
# rm(list = ls()) # vide TOUT l'environnement (rm = remove)
rm(objet1)        # supprime un objet
ls()              # liste des objets
ls(".GlobalEnv")  # liste des objets (idem)
search()          # montre environnement et paquets
DF <- read.csv("metal_bands.csv", sep = ";", dec = ".")
head(DF)
str(DF) # TOUJOURS VERIFIER LE FORMAT DES VARIABLES !
?read.csv
# adresse implicite
paste0(getwd()," \meta_band.csv")
getwd()
# adresse implicite
paste0(getwd(),"\meta_bands.csv")
# adresse implicite
paste0(getwd(),"/meta_bands.csv")
readxl::read_xlsx("meta_bands.xlsx")
readxl::read_xlsx("metal_bands.xlsx")
# importation avec excel
# install.packages("readxl")
library(readxl)
DF <- readxl::read_xlsx("metal_bands.xlsx")
head(DF)
knitr::opts_chunk$set(echo = TRUE, results = T)
rm(list = ls()) # efface tous les objets de l'environnement
5+5
5*2
20/2
sqrt(40)
2^4
# function with various descriptive statistics
fxdescribe = function(x){
# x has to be a continuous variable
c(obs          = length(x),
missing      = sum(is.na(x),na.rm=T),
min          = min(x,na.rm=T),
max          = max(x,na.rm=T),
median       = median(x,na.rm=T),
q1           = quantile(x,na.rm=T,c(.25)),
q3           = quantile(x,na.rm=T,c(.75)),
mean         = mean(x,na.rm=T),
sd           = sd(x,na.rm=T),
`95lci`      = mean(x,na.rm=T)-(sd(x,na.rm = T)*1.96/sqrt(length(x))),
`95hci`      = mean(x,na.rm=T)+(sd(x,na.rm = T)*1.96/sqrt(length(x)))
)
}
# e.g. =
fxdescribe(c(NA,NA,2,5,6))
seq(from = 0, to = 100, by = 20)
c(1:10)*2
rep(x = c(1,2,3), times = 3)
rep(x = c(1,2,3), times = 3, each = 3)
sum(1:3)
sum(is.na(c(NA,NA,1,NA)))
plot(x = c(1,2,3), y = c(4,5,6))
boxplot(1:100)
summary(c(1,8,9,7))
objet  <- "objet"
objet  = 4
1objet <- 4 # erreur
vache   <- c("spassky", "karpov", "kasparov", "topalov") # "c()" signifie "concaténer"
couleur <- c("noire", "noire", "marron", "blanche")
poids   <- c(900,600,700,650)
table(couleur)
summary(poids)
objet1 <- 10
objet2 <- "Michel est dans le garage"
objet1
objet2
vache   <- c("spassky", "karpov", "kasparov", "topalov")
str(vache) # characters (lettres)
poids   <- c(900,600,700,650)
str(poids) # integers (chiffres ronds)
# les données doivent être du même type
vache_poids <- c(vache, poids)
str(vache_poids)
# possible de changer la nature d'un vecteur
(poids <- as.character(poids))
(poids <- as.numeric(poids))
facteur_vache <- factor(vache)
facteur_vache
# NB : les niveaux sont rangés automatiquement par ordre alphabétique
# possibilité de ré-ordonner ces niveaux et de les renommer
facteur_vache <- factor(vache, levels = c("spassky","kasparov","karpov","topalov"),
labels = c("Spassky","Kasparov","Karpov","Topalov"))
facteur_vache
vache   <- c("spassky", "karpov", "kasparov", "topalov")
couleur <- c("noire", "noire", "marron", "blanche")
# on combine les deux vecteurs avec la fonction cbind()
# qui veut dire : column bind (combiner colonnes)
MAT <- cbind(vache,couleur)
MAT
DF <- data.frame(vache,couleur,poids)
DF
LS <- list(vache, MAT, DF)
LS
LS <- list() # liste vide
#
for (VACHE in DF[,"vache"]) {
LS[[VACHE]] <- DF[DF$vache == VACHE,]
}
LS
getwd()
DF <- read.csv("metal_bands.csv", header = T, sep = ";", dec = ".")
head(DF, n = 4)
str(DF) # TOUJOURS VERIFIER LE FORMAT DES VARIABLES !
# adresse implicite
paste0(getwd(),"/meta_bands.csv")
# importation avec excel
# install.packages("readxl")
library(readxl)
DF <- readxl::read_xlsx("metal_bands.xlsx")
head(DF)
read.csv("reading_skills.csv")
read.csv("reading_skills1.csv")
read.csv("reading_skills1.csv",sep=";")
DF = read.csv("reading_skills1.csv",sep=";")
head(DF);str(DF)
read.csv("reading_skills1.csv")
read.csv("reading_skills2.csv")
read.csv("reading_skills2.csv",sep=";")
DF = read.csv("reading_skills1.csv",sep=";")
DF = read.csv("reading_skills2.csv",sep=";")
DF = read.csv("reading_skills1.csv",sep=";")
str(DF)
DF = read.csv("reading_skills1.csv",sep=";", dec = ".")
str(DF)
DF = read.csv("reading_skills1.csv",sep=";", dec = ",")
str(DF)
DF = read.csv("reading_skills2.csv",sep=";")
str(DF)
head(DF);str(DF)
DF = read.csv("reading_skills2.csv",sep=";")
head(DF);str(DF)
DF = read.csv("reading_skills3.csv",sep=";")
head(DF);str(DF)
DF = read.csv("reading_skills3.csv",sep=" ")
head(DF);str(DF)
DF = read.csv("reading_skills3.csv",sep=" ", dec = ".")
head(DF);str(DF)
DF = read.csv("reading_skills3.csv",sep=" ", dec = ",")
head(DF);str(DF)
DF = read.csv("reading_skills3.csv",sep=" ", dec = ",")
head(DF);str(DF)
DF = read.csv("reading_skills3.csv",sep=" ", dec = ",")
head(DF);str(DF)
DF = read.csv("reading_skills1.csv",sep=";", dec = ",")
head(DF);str(DF)
DF = read.csv("reading_skills2.csv",sep=";")
head(DF);str(DF)
DF = readxl::read_xlsx("reading_skills3.xlsx")
head(DF);str(DF)
DF = read.csv("reading_skills1.csv",sep=";", dec = ",")
head(DF);str(DF)
DF = read.csv("reading_skills2.csv",sep=";")
head(DF);str(DF)
DF = readxl::read_xlsx("reading_skills3.xlsx")
head(DF);str(DF)
DF = read.csv("reading_skills3.csv",sep=";")
DF = read.csv("reading_skills4.csv",sep=";")
head(DF);str(DF)
DF = read.csv("reading_skills4.csv",sep=";", na.strings = c("NA","no data"))
head(DF);str(DF)
# rm(list = ls()) # vide TOUT l'environnement (rm = remove)
rm(objet1)        # supprime un objet
ls()              # liste des objets
ls(".GlobalEnv")  # liste des objets (idem)
search()          # montre environnement et paquets
DF <- read_xlsx("metal_bands.xlsx")
DF
DF <- read_xlsx("metal_bands.xlsx")
Bands           # ne fonctionne pas...
attach(DF) # transforme le DF en environnement
search()
Bands
detach(DF) # dé-transforme le DF en simple DF
Bands = c("megadeath", "sepultura", "mylene farmer")
attach(DF)
Bands
vache[1]
DF[2,]
DF[,2] # renvoie un vecteur
DF[2]  # renvoie un DF
DF
DF <- read.csv("metal_bands.csv", sep =";")
Bands           # ne fonctionne pas...
DF$Bands        # fonctionne !
DF
DF[2,]
DF[,2] # renvoie un vecteur
DF[2]  # renvoie un DF
DF[2,2]
DF[DF$Territory == "France","Bands"]
DF[,"Bands"]
DF["Bands"]
DF[DF$Territory == "France","Bands"]
DF
DF[DF$Territory %in%  c("France","Uruguay"),]
DF[c("Bands", "Happiness")]
DF
# filtrage de données "négatif"
DF[!DF$Territory %in%  c("Togo","Bulgaria"),]
DF[DF$Bands > 1,]
DF[na.omit(DF),]
na.omit(DF)
DF[!is.na(DF),]
DF[row.names %in% c(5,87,142),]
DF[row.names(DF) %in% c(5,87,142),]
rm(Bands)
# https://sparkbyexamples.com/r-programming/usage-of-in-operator-in-r/
# Check value in a Vector
67 %in% c(2,5,8,23,67,34)
DF$Territory %in%  c("France","Uruguay")
DF[DF$Territory %in%  c("France","Uruguay"),]
DF[DF$Territory == "France","Happinness"]
DF[DF$Territory == "France","Happiness"]
DF[DF$Territory == "France","Happiness"]
DF[DF$Territory == "France","Happiness"] <- 6.688
DF[DF$Territory == "France","Happiness"]
DF2 <- DF
DF2[DF2$Territory == "France","Happiness"]
DF[DF2$Territory == "France","Happiness"] <- 20 # bonheur absolu ?
DF[DF2$Territory == "France","Happiness"]
DF2[is.na(DF2),]
DF2[is.na(DF2),"Bands"]
DF2[is.na(DF2),"Bands"] <- 0
DF2$Bands[is.na(DF2),]
DF2$Bands[is.na(DF2)]
DF2[is.na(DF2),"Bands"]
which(is.na(DF2),"Bands")
DF2[which(is.na(DF2),"Bands")] <- 0
DF2[which(is.na(DF2),"Bands"),] <- 0
DF2$Bands
DF2 <- DF
DF2[DF2$Territory == "France","Happiness"]
DF2[DF2$Territory == "France","Happiness"] <- 20 # bonheur absolu ?
DF2[DF2$Territory == "France","Happiness"]
which(is.na(DF2),"Bands")
DF2[which(is.na(DF2),"Bands"),]
DF2$Bands[is.na(DF2$Bands)]
DF2$Bands[is.na(DF2$Bands)]<- 0
DF2$Bands
View(DF2)
DF[order(DF$Bands),]
head(DF[order(DF$Bands),])
head(DF[order(-DF$Bands),])
head(DF[order(-DF$Bands,DF$Population),]) # ordre décroissant
head(DF[order(DF$Bands,DF$Population),]) # ordre décroissant
head(DF[order(DF$Bands),])  # ordre croissant
head(DF[order(DF$Bands,DF$Population),]) # ordre décroissant
head(DF[-order(DF$Bands,DF$Population),]) # ordre décroissant
head(DF[order(DF$Bands,-DF$Population),]) # ordre décroissant
head(DF[order(-DF$Bands,-DF$Population),]) # ordre décroissant
attach(DF)
DF[Territory == "France" | Bands > 10, ]
DF
DF[Bands > 10 & Happiness > 2 & Population > 1000, ]
str(DF)
rownames(DF)
DF[Territory == "France" | Bands > 10, ]
DF[c("Bands", "Happiness")]
DF[DF$Territory == "France","Bands"]
DF[DF$Territory %in%  c("France","Uruguay"),]
DF[!DF$Territory %in%  c("Togo","Bulgaria"),]
DF[row.names(DF) %in% c(5,87,142),]
DF[DF$Bands > 1,]
DF[Territory == "France" | Bands > 10, ]
DF[Bands > 10 & Happiness > 2 & Population > 1000, ]
DF[Bands > 10 & Happiness > 2 & Population > 1000, ] %>%
str
str(DF[Bands > 10 & Happiness > 2 & Population > 1000, ])
View(DF[Bands > 10 & Happiness > 2 & Population > 1000, ])
DF[DF$Bands > 1,]
DF[DF$Bands > 1 & !is.na(DF$Bands),]
DF[Territory == "France" | Bands > 10, ]
DF[Bands > 10 & Happiness > 2 & Population > 1000, ]
DF[Bands > 10 & Happiness > 2 & !is.na(Population), ]
DF[Bands > 10 & Happiness > 2 & !is.na(Territory), ]
DF[Bands > 10 & Happiness > 2 & !is.na(DF$Territory), ]
DF
?filter
DF[DF$Bands > 1 & !is.na(DF$Bands),]
DF[Territory == "France" | Bands > 10, ]
DF[Bands > 10 & Happiness > 2 & is.na(Territory), ]
DF[Bands > 10 & Happiness > 2 & !is.na(Territory), ]
DF[Bands > 10 & Happiness > 2 & !is.na(Bands), ]
DF[Bands > 10 & Happiness > 2, ]
complete.cases(DF)
DF2 <- DF[complete.cases(DF),]
DF2
detach(DF)
attach(DF2)
DF2[Bands > 5 & Population > 100,]
DF2[Bands > 5 & Population > 10000,]
DF2[Bands < 5 & Population > 10000,]
DF2[Bands < 5 & Population > 100000,]
DF2[Bands < 5 & Population > 1000000,]
DF2[Bands < 5 & Population > 10000000,]
DF2[Territory %in%  c("France","Gremany") | Bands > 20, ]
DF2[Territory %in%  c("France","Gremany") | Bands > 1000, ]
DF2[Territory %in%  c("France","Gremany") | Bands > 2000, ]
round(DF$Happiness,1)
round(DF$Happiness,0)
Happiness_rounded <- round(DF$Happiness,0)
Happiness_rounded
DF$Happiness_rounded <- round(DF$Happiness,0)
head(DF)
# nous pouvons résoudre ce problème avec cbind
head(cbind(DF,Happiness_rounded))
DF <- read.csv("metal_bands.csv", sep =";")
Happiness_rounded <- round(DF2$Happiness,0)
Happiness_rounded # Nous avons crée un vecteur, mais celui-ci est à l'extérieur du DF...
# nous pouvons résoudre ce problème avec cbind
head(cbind(DF2,Happiness_rounded))
# néanmoins il y a une solution beaucoup plus simple :
DF2$Happiness_rounded <- round(DF2$Happiness,0)
head(DF2)
mean(DF2$Happiness)
DF2$Happiness_mean <- mean(DF2$Happiness)
DF2$Happiness_mean
head(DF2)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
DF2$Happiness_mean   <- mean(DF2$Happiness, na.rm = T)
DF2$Happiness_median <- median(DF2$Happiness, na.rm = T)
DF2$Happiness_var    <- var(DF2$Happiness, na.rm = T)
DF2$Happiness_sd     <- sd(DF2$Happiness, na.rm = T)
mutate(data = DF2,
Happiness_mean   = mean(Happiness, na.rm = T),
Happiness_median = median(Happiness, na.rm = T),
Happiness_var    = var(Happiness, na.rm = T),
Happiness_sd      = sd(Happiness, na.rm = T)
)
?mutate
mutate(.data = DF2,
Happiness_mean   = mean(Happiness, na.rm = T),
Happiness_median = median(Happiness, na.rm = T),
Happiness_var    = var(Happiness, na.rm = T),
Happiness_sd      = sd(Happiness, na.rm = T)
)
DF2 <-
mutate(.data = DF2,
Happiness_mean   = mean(Happiness, na.rm = T),
Happiness_median = median(Happiness, na.rm = T),
Happiness_var    = var(Happiness, na.rm = T),
Happiness_sd      = sd(Happiness, na.rm = T)
)
head(DF2)
DF2 <- DF
DF2
DF2 <-
mutate(.data = DF2,
Happiness_mean   = mean(Happiness, na.rm = T),
Happiness_median = median(Happiness, na.rm = T),
Happiness_var    = var(Happiness, na.rm = T),
Happiness_sd      = sd(Happiness, na.rm = T)
)
head(DF2)
DF2 <-
mutate(.data = DF2,
Happiness_mean   = mean(Happiness, na.rm = T),
Happiness_median = median(Happiness, na.rm = T),
Happiness_var    = var(Happiness, na.rm = T),
Happiness_sd     = sd(Happiness, na.rm = T),
Happiness_z      = Happiness_mean/Happiness_sd
)
head(DF2)
DF2[c("Bands", "Happiness")]
select(DF2,"Bands","Happiness")
dplyr::filter(DF2,Bands < 5 & Population > 10000000)
arrange(DF2,Bands)
head(arrange(DF2,Bands))
dplyr::select(DF2,Bands,Happiness)
search()
detach(DF2)
detach(DF)
knitr::opts_chunk$set(echo = TRUE, results = T)
rm(list = ls()) # efface tous les objets de l'environnement
# function with various descriptive statistics
fxdescribe = function(x){
# x has to be a continuous variable
c(obs          = length(x),
missing      = sum(is.na(x),na.rm=T),
min          = min(x,na.rm=T),
max          = max(x,na.rm=T),
median       = median(x,na.rm=T),
q1           = quantile(x,na.rm=T,c(.25)),
q3           = quantile(x,na.rm=T,c(.75)),
mean         = mean(x,na.rm=T),
sd           = sd(x,na.rm=T),
`95lci`      = mean(x,na.rm=T)-(sd(x,na.rm = T)*1.96/sqrt(length(x))),
`95hci`      = mean(x,na.rm=T)+(sd(x,na.rm = T)*1.96/sqrt(length(x)))
)
}
# e.g. =
fxdescribe(c(NA,NA,2,5,6))
5+5
5*2
20/2
sqrt(40)
2^4
# function with various descriptive statistics
fxdescribe = function(x){
# x has to be a continuous variable
c(obs          = length(x),
missing      = sum(is.na(x),na.rm=T),
min          = min(x,na.rm=T),
max          = max(x,na.rm=T),
median       = median(x,na.rm=T),
q1           = quantile(x,na.rm=T,c(.25)),
q3           = quantile(x,na.rm=T,c(.75)),
mean         = mean(x,na.rm=T),
sd           = sd(x,na.rm=T),
`95lci`      = mean(x,na.rm=T)-(sd(x,na.rm = T)*1.96/sqrt(length(x))),
`95hci`      = mean(x,na.rm=T)+(sd(x,na.rm = T)*1.96/sqrt(length(x)))
)
}
# e.g. =
fxdescribe(c(NA,NA,2,5,6))
seq(from = 0, to = 100, by = 20)
c(1:10)*2
rep(x = c(1,2,3), times = 3)
rep(x = c(1,2,3), times = 3, each = 3)
sum(1:3)
sum(is.na(c(NA,NA,1,NA)))
plot(x = c(1,2,3), y = c(4,5,6))
boxplot(1:100)
summary(c(1,8,9,7))
DF = read.csv("reading_skills.csv", sep = ";")
DF = read.csv("reading_skills1.csv", sep = ";")
DF
str(DF)
DF = read.csv("reading_skills1.csv", sep = ";", dec = ".")
str(DF)
DF = read.csv("reading_skills1.csv", sep = ";", dec = ",")
str(DF)
View(DF)
bosplot(DF)
boxplot(DF)
boxplot(DF$iq)
DF = read.csv("reading_skills1.csv", sep = ";", dec = ",")
str(DF)
View(DF)
boxplot(DF$iq)
DF$iq
DF = read.csv("reading_skills1.csv", sep = ";", dec = ",")
str(DF)
View(DF)
DF$iq
boxplot(DF$iq)
DF[DF$iq==-200,]
DF[DF$iq==-200,5]
DF[DF$iq==-200,5]<- -2
boxplot(DF$iq)
# Filtrez les observations des participants 1 à 5
DF[DF$sujet %in% 1:5,]
# Filtrez les valeurs de iq > 0 pour les sujets avec dyslexie
DF[DF$dyslexia=="yes" & DF$iq >0,]
# Ré-importez et inspectez reading_skills1.csv
DF = read.csv("reading_skills1.csv", sep = ";", dec = ",")
str(DF)
# Filtrez les observations des participants 1 à 5
DF[DF$sujet %in% 1:5,]
# Filtrez les valeurs de iq > 0 pour les sujets avec dyslexie
DF[DF$dyslexia=="yes" & DF$iq >0,]
# Une valeur anormale de iq s'est glissée dans les données ; identifiez cette valeur et remplacez la par -2
DF$iq
boxplot(DF$iq)
DF[DF$iq==-200,5]<- -2
boxplot(DF$iq)
mean(DF$accuracy)
# Créez une nouvelle variable donnant la moyenne de accuracy
(DF$accuracy_avg <- mean(DF$accuracy, na.rm=T))
DF$accuracy_avg
# Filtrez les valeurs de iq < 0 ou alors les sujets sans dyslexie
DF[DF$dyslexia=="no" | DF$iq <0,]
DF <- read.csv("metal_bands.csv", header = T, sep = ";", dec = ".")
head(DF, n = 4)
str(DF) # TOUJOURS VERIFIER LE FORMAT DES VARIABLES !
View(DF)
DF[DF$sujet %in% 1:5,c("sujet","dyslexia")]
# Ré-importez et inspectez reading_skills1.csv
DF = read.csv("reading_skills1.csv", sep = ";", dec = ",")
str(DF)
DF[DF$sujet %in% 1:5,c("sujet","dyslexia")]
DF[is.na(DF)]
DF[is.na(DF),]
DF
DF
DF <- read_xlsx("reading_skills3.xlsx")
DF <- readxl::read_xlsx("reading_skills3.xlsx")
DF
library(ggplot2)
ggplot(DF,aes(x=age,y=accuracy))+
geom_point()+
geom_smooth(method="lm")
ggplot(DF,aes(x=age,y=accuracy))+
geom_point()+
geom_smooth(method="lm")+
theme_bw(base_size=16)
cor.test(DF$age,DF$accuracy)
